{"ast":null,"code":"var _jsxFileName = \"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/galileo/galileo/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { letters, status } from './constants';\nimport { useEffect, useState } from 'react';\nimport { EndGameModal } from './components/EndGameModal';\nimport { InfoModal } from './components/InfoModal';\nimport { Keyboard } from './components/Keyboard';\nimport { SettingsModal } from './components/SettingsModal';\nimport answers from './data/answers';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { ReactComponent as Info } from './data/Info.svg';\nimport { ReactComponent as Settings } from './data/Settings.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst words = require('./data/words').default;\nconst state = {\n  playing: 'playing',\n  won: 'won',\n  lost: 'lost'\n};\nexport const difficulty = {\n  easy: 'easy',\n  normal: 'normal',\n  hard: 'hard'\n};\nconst getRandomAnswer = () => {\n  const randomIndex = Math.floor(Math.random() * answers.length);\n  return answers[randomIndex].toUpperCase();\n};\nfunction App() {\n  _s();\n  const initialStates = {\n    questions: [\"guess the city \", \"Guess the river name \", \"Guess the food name\"],\n    answer: () => getRandomAnswer(),\n    gameState: state.playing,\n    board: [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],\n    cellStatuses: Array(6).fill(Array(5).fill(status.unguessed)),\n    currentRow: 0,\n    currentCol: 0,\n    letterStatuses: () => {\n      const letterStatuses = {};\n      letters.forEach(letter => {\n        letterStatuses[letter] = status.unguessed;\n      });\n      return letterStatuses;\n    },\n    submittedInvalidWord: false,\n    darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches\n  };\n  const [answer, setAnswer] = useLocalStorage('stateAnswer', initialStates.answer());\n  const [question, setQuestion] = useState(initialStates.questions[Math.floor(Math.random() * initialStates.questions.length)]);\n  const [gameState, setGameState] = useLocalStorage('stateGameState', initialStates.gameState);\n  const [board, setBoard] = useLocalStorage('stateBoard', initialStates.board);\n  const [cellStatuses, setCellStatuses] = useLocalStorage('stateCellStatuses', initialStates.cellStatuses);\n  const [currentRow, setCurrentRow] = useLocalStorage('stateCurrentRow', initialStates.currentRow);\n  const [currentCol, setCurrentCol] = useLocalStorage('stateCurrentCol', initialStates.currentCol);\n  const [letterStatuses, setLetterStatuses] = useLocalStorage('stateLetterStatuses', initialStates.letterStatuses());\n  const [submittedInvalidWord, setSubmittedInvalidWord] = useLocalStorage('stateSubmittedInvalidWord', initialStates.submittedInvalidWord);\n  const [currentStreak, setCurrentStreak] = useLocalStorage('current-streak', 0);\n  const [longestStreak, setLongestStreak] = useLocalStorage('longest-streak', 0);\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [firstTime, setFirstTime] = useLocalStorage('first-time', true);\n  const [guessesInStreak, setGuessesInStreak] = useLocalStorage('guesses-in-streak', firstTime ? 0 : -1);\n  const [infoModalIsOpen, setInfoModalIsOpen] = useState(firstTime);\n  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false);\n  const [difficultyLevel, setDifficultyLevel] = useLocalStorage('difficulty', difficulty.normal);\n  const getDifficultyLevelInstructions = () => {\n    if (difficultyLevel === difficulty.easy) {\n      return 'Guess any 5 letters';\n    } else if (difficultyLevel === difficulty.hard) {\n      return \"Guess any valid word using all the hints you've been given\";\n    } else {\n      return 'Guess any valid word';\n    }\n  };\n  const eg = {};\n  const [exactGuesses, setExactGuesses] = useLocalStorage('exact-guesses', eg);\n  const openModal = () => setIsOpen(true);\n  const closeModal = () => setIsOpen(false);\n  const handleInfoClose = () => {\n    setFirstTime(false);\n    setInfoModalIsOpen(false);\n  };\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', initialStates.darkMode);\n  const toggleDarkMode = () => setDarkMode(prev => !prev);\n  useEffect(() => document.documentElement.classList[darkMode ? 'add' : 'remove']('dark'), [darkMode]);\n  useEffect(() => {\n    if (gameState !== state.playing) {\n      setTimeout(() => {\n        openModal();\n      }, 500);\n    }\n  }, [gameState]);\n  const getCellStyles = (rowNumber, colNumber, letter) => {\n    if (rowNumber === currentRow) {\n      if (letter) {\n        return `nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark ${submittedInvalidWord ? 'border border-red-800' : ''}`;\n      }\n      return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';\n    }\n    switch (cellStatuses[rowNumber][colNumber]) {\n      case status.green:\n        return 'nm-inset-n-green text-gray-50';\n      case status.yellow:\n        return 'nm-inset-yellow-500 text-gray-50';\n      case status.gray:\n        return 'nm-inset-n-gray text-gray-50';\n      default:\n        return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';\n    }\n  };\n  const addLetter = letter => {\n    setSubmittedInvalidWord(false);\n    setBoard(prev => {\n      if (currentCol > 4) {\n        return prev;\n      }\n      const newBoard = [...prev];\n      newBoard[currentRow][currentCol] = letter;\n      return newBoard;\n    });\n    if (currentCol < 5) {\n      setCurrentCol(prev => prev + 1);\n    }\n  };\n\n  // returns an array with a boolean of if the word is valid and an error message if it is not\n  const isValidWord = word => {\n    if (word.length < 5) return [false, `please enter a 5 letter word`];\n    if (difficultyLevel === difficulty.easy) return [true];\n    if (!words[word.toLowerCase()]) return [false, `${word} is not a valid word. Please try again.`];\n    if (difficultyLevel === difficulty.normal) return [true];\n    const guessedLetters = Object.entries(letterStatuses).filter(_ref => {\n      let [letter, letterStatus] = _ref;\n      return [status.yellow, status.green].includes(letterStatus);\n    });\n    const yellowsUsed = guessedLetters.every(_ref2 => {\n      let [letter, _] = _ref2;\n      return word.includes(letter);\n    });\n    const greensUsed = Object.entries(exactGuesses).every(_ref3 => {\n      let [position, letter] = _ref3;\n      return word[parseInt(position)] === letter;\n    });\n    if (!yellowsUsed || !greensUsed) return [false, `In hard mode, you must use all the hints you've been given.`];\n    return [true];\n  };\n  const onEnterPress = () => {\n    const word = board[currentRow].join('');\n    const [valid, _err] = isValidWord(word);\n    if (!valid) {\n      console.log({\n        valid,\n        _err\n      });\n      setSubmittedInvalidWord(true);\n      // alert(_err)\n      return;\n    }\n    if (currentRow === 6) return;\n    updateCellStatuses(word, currentRow);\n    updateLetterStatuses(word);\n    setCurrentRow(prev => prev + 1);\n    setCurrentCol(0);\n\n    // Only calculate guesses in streak if they've\n    // started a new streak since this feature was added.\n    if (guessesInStreak >= 0) {\n      setGuessesInStreak(prev => prev + 1);\n    }\n  };\n  const onDeletePress = () => {\n    setSubmittedInvalidWord(false);\n    if (currentCol === 0) return;\n    setBoard(prev => {\n      const newBoard = [...prev];\n      newBoard[currentRow][currentCol - 1] = '';\n      return newBoard;\n    });\n    setCurrentCol(prev => prev - 1);\n  };\n  const updateCellStatuses = (word, rowNumber) => {\n    const fixedLetters = {};\n    setCellStatuses(prev => {\n      const newCellStatuses = [...prev];\n      newCellStatuses[rowNumber] = [...prev[rowNumber]];\n      const wordLength = word.length;\n      const answerLetters = answer.split('');\n\n      // set all to gray\n      for (let i = 0; i < wordLength; i++) {\n        newCellStatuses[rowNumber][i] = status.gray;\n      }\n\n      // check greens\n      for (let i = wordLength - 1; i >= 0; i--) {\n        if (word[i] === answer[i]) {\n          newCellStatuses[rowNumber][i] = status.green;\n          answerLetters.splice(i, 1);\n          fixedLetters[i] = answer[i];\n        }\n      }\n\n      // check yellows\n      for (let i = 0; i < wordLength; i++) {\n        if (answerLetters.includes(word[i]) && newCellStatuses[rowNumber][i] !== status.green) {\n          newCellStatuses[rowNumber][i] = status.yellow;\n          answerLetters.splice(answerLetters.indexOf(word[i]), 1);\n        }\n      }\n      return newCellStatuses;\n    });\n    setExactGuesses(prev => ({\n      ...prev,\n      ...fixedLetters\n    }));\n  };\n  const isRowAllGreen = row => {\n    return row.every(cell => cell === status.green);\n  };\n  const avgGuessesPerGame = () => {\n    if (currentStreak > 0) {\n      return guessesInStreak / currentStreak;\n    } else {\n      return 0;\n    }\n  };\n\n  // every time cellStatuses updates, check if the game is won or lost\n  useEffect(() => {\n    const cellStatusesCopy = [...cellStatuses];\n    const reversedStatuses = cellStatusesCopy.reverse();\n    const lastFilledRow = reversedStatuses.find(r => {\n      return r[0] !== status.unguessed;\n    });\n    if (gameState === state.playing && lastFilledRow && isRowAllGreen(lastFilledRow)) {\n      setGameState(state.won);\n      var streak = currentStreak + 1;\n      setCurrentStreak(streak);\n      setLongestStreak(prev => streak > prev ? streak : prev);\n    } else if (gameState === state.playing && currentRow === 6) {\n      setGameState(state.lost);\n      setCurrentStreak(0);\n    }\n  }, [cellStatuses, currentRow, gameState, setGameState, currentStreak, setCurrentStreak, setLongestStreak]);\n  const updateLetterStatuses = word => {\n    setLetterStatuses(prev => {\n      const newLetterStatuses = {\n        ...prev\n      };\n      const wordLength = word.length;\n      for (let i = 0; i < wordLength; i++) {\n        if (newLetterStatuses[word[i]] === status.green) continue;\n        if (word[i] === answer[i]) {\n          newLetterStatuses[word[i]] = status.green;\n        } else if (answer.includes(word[i])) {\n          newLetterStatuses[word[i]] = status.yellow;\n        } else {\n          newLetterStatuses[word[i]] = status.gray;\n        }\n      }\n      return newLetterStatuses;\n    });\n  };\n  const playAgain = () => {\n    if (gameState === state.lost) {\n      setGuessesInStreak(0);\n    }\n    setAnswer(initialStates.answer());\n    setGameState(initialStates.gameState);\n    setBoard(initialStates.board);\n    setCellStatuses(initialStates.cellStatuses);\n    setCurrentRow(initialStates.currentRow);\n    setCurrentCol(initialStates.currentCol);\n    setLetterStatuses(initialStates.letterStatuses());\n    setSubmittedInvalidWord(initialStates.submittedInvalidWord);\n    setExactGuesses({});\n    closeModal();\n  };\n  const modalStyles = {\n    overlay: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      zIndex: 99\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      height: 'calc(100% - 2rem)',\n      width: 'calc(100% - 2rem)',\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      boxShadow: `${darkMode ? '0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C' : '0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'}`,\n      border: 'none',\n      borderRadius: '1rem',\n      maxWidth: '475px',\n      maxHeight: '650px',\n      position: 'relative'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flex flex-col justify-between h-fill bg-background dark:bg-background-dark`,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"flex flex-row justify-between py-2 px-3 text-primary dark:text-primary-dark\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setSettingsModalIsOpen(true),\n          className: \"p-1 rounded-full\",\n          children: /*#__PURE__*/_jsxDEV(Settings, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \" text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\",\n            children: \"galileo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \" text-center text-xl tracking-wide font-bold font-righteous mt-3\",\n            children: question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setInfoModalIsOpen(true),\n          className: \"p-1 rounded-full\",\n          children: /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center flex-col py-3 flex-1 justify-center relative\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-5 grid-flow-row gap-4\",\n            children: board.map((row, rowNumber) => row.map((letter, colNumber) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${getCellStyles(rowNumber, colNumber, letter)} inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full`,\n              children: letter\n            }, colNumber, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 19\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `absolute -bottom-24 left-1/2 transform -translate-x-1/2 ${gameState === state.playing ? 'hidden' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: darkMode ? 'dark' : '',\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                autoFocus: true,\n                type: \"button\",\n                className: \"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\",\n                onClick: playAgain,\n                children: \"Play Again\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n        isOpen: infoModalIsOpen,\n        handleClose: handleInfoClose,\n        darkMode: darkMode,\n        styles: modalStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EndGameModal, {\n        isOpen: modalIsOpen,\n        handleClose: closeModal,\n        styles: modalStyles,\n        darkMode: darkMode,\n        gameState: gameState,\n        state: state,\n        currentStreak: currentStreak,\n        longestStreak: longestStreak,\n        answer: answer,\n        playAgain: playAgain,\n        avgGuessesPerGame: avgGuessesPerGame()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n        isOpen: settingsModalIsOpen,\n        handleClose: () => setSettingsModalIsOpen(false),\n        styles: modalStyles,\n        darkMode: darkMode,\n        toggleDarkMode: toggleDarkMode,\n        difficultyLevel: difficultyLevel,\n        setDifficultyLevel: setDifficultyLevel,\n        levelInstructions: getDifficultyLevelInstructions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `h-auto relative ${gameState === state.playing ? '' : 'invisible'}`,\n        children: /*#__PURE__*/_jsxDEV(Keyboard, {\n          letterStatuses: letterStatuses,\n          addLetter: addLetter,\n          onEnterPress: onEnterPress,\n          onDeletePress: onDeletePress,\n          gameDisabled: gameState !== state.playing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0pPEFbqiTh/V/O6mVmXcVmXa1fY=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["letters","status","useEffect","useState","EndGameModal","InfoModal","Keyboard","SettingsModal","answers","useLocalStorage","ReactComponent","Info","Settings","jsxDEV","_jsxDEV","words","require","default","state","playing","won","lost","difficulty","easy","normal","hard","getRandomAnswer","randomIndex","Math","floor","random","length","toUpperCase","App","_s","initialStates","questions","answer","gameState","board","cellStatuses","Array","fill","unguessed","currentRow","currentCol","letterStatuses","forEach","letter","submittedInvalidWord","darkMode","window","matchMedia","matches","setAnswer","question","setQuestion","setGameState","setBoard","setCellStatuses","setCurrentRow","setCurrentCol","setLetterStatuses","setSubmittedInvalidWord","currentStreak","setCurrentStreak","longestStreak","setLongestStreak","modalIsOpen","setIsOpen","firstTime","setFirstTime","guessesInStreak","setGuessesInStreak","infoModalIsOpen","setInfoModalIsOpen","settingsModalIsOpen","setSettingsModalIsOpen","difficultyLevel","setDifficultyLevel","getDifficultyLevelInstructions","eg","exactGuesses","setExactGuesses","openModal","closeModal","handleInfoClose","setDarkMode","toggleDarkMode","prev","document","documentElement","classList","setTimeout","getCellStyles","rowNumber","colNumber","green","yellow","gray","addLetter","newBoard","isValidWord","word","toLowerCase","guessedLetters","Object","entries","filter","_ref","letterStatus","includes","yellowsUsed","every","_ref2","_","greensUsed","_ref3","position","parseInt","onEnterPress","join","valid","_err","console","log","updateCellStatuses","updateLetterStatuses","onDeletePress","fixedLetters","newCellStatuses","wordLength","answerLetters","split","i","splice","indexOf","isRowAllGreen","row","cell","avgGuessesPerGame","cellStatusesCopy","reversedStatuses","reverse","lastFilledRow","find","r","streak","newLetterStatuses","playAgain","modalStyles","overlay","top","left","right","bottom","backgroundColor","zIndex","content","transform","height","width","boxShadow","border","borderRadius","maxWidth","maxHeight","children","className","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","autoFocus","isOpen","handleClose","styles","levelInstructions","gameDisabled","_c","$RefreshReg$"],"sources":["/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/galileo/galileo/src/App.tsx"],"sourcesContent":["import { letters, status } from './constants'\nimport { useEffect, useState } from 'react'\n\nimport { EndGameModal } from './components/EndGameModal'\nimport { InfoModal } from './components/InfoModal'\nimport { Keyboard } from './components/Keyboard'\nimport { SettingsModal } from './components/SettingsModal'\nimport answers from './data/answers'\nimport { useLocalStorage } from './hooks/useLocalStorage'\nimport { ReactComponent as Info } from './data/Info.svg'\nimport { ReactComponent as Settings } from './data/Settings.svg'\nconst words = require('./data/words').default as { [key: string]: boolean }\n\nconst state = {\n  playing: 'playing',\n  won: 'won',\n  lost: 'lost',\n}\n\nexport const difficulty = {\n  easy: 'easy',\n  normal: 'normal',\n  hard: 'hard',\n}\n\nconst getRandomAnswer = () => {\n  const randomIndex = Math.floor(Math.random() * answers.length)\n  return answers[randomIndex].toUpperCase()\n}\n\ntype State = {\n  answer: () => string\n  questions: string[]\n  gameState: string\n  board: string[][]\n  cellStatuses: string[][]\n  currentRow: number\n  currentCol: number\n  letterStatuses: () => { [key: string]: string }\n  submittedInvalidWord: boolean\n  darkMode: boolean\n}\n\nfunction App() {\n  const initialStates: State = {\n\n    questions: [\"guess the city \", \"Guess the river name \",\"Guess the food name\"], \n    answer: () => getRandomAnswer(),\n    gameState: state.playing,\n    board: [\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n    ],\n    cellStatuses: Array(6).fill(Array(5).fill(status.unguessed)),\n    currentRow: 0,\n    currentCol: 0,\n    letterStatuses: () => {\n      const letterStatuses: { [key: string]: string } = {}\n      letters.forEach((letter) => {\n        letterStatuses[letter] = status.unguessed\n      })\n      return letterStatuses\n    },\n    submittedInvalidWord: false,\n    darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n  }\n\n  const [answer, setAnswer] = useLocalStorage('stateAnswer', initialStates.answer())\n  const [question, setQuestion] = useState(initialStates.questions[Math.floor(Math.random()*initialStates.questions.length)]);\n  \n  const [gameState, setGameState] = useLocalStorage('stateGameState', initialStates.gameState)\n  const [board, setBoard] = useLocalStorage('stateBoard', initialStates.board)\n  const [cellStatuses, setCellStatuses] = useLocalStorage(\n    'stateCellStatuses',\n    initialStates.cellStatuses\n  )\n  const [currentRow, setCurrentRow] = useLocalStorage('stateCurrentRow', initialStates.currentRow)\n  const [currentCol, setCurrentCol] = useLocalStorage('stateCurrentCol', initialStates.currentCol)\n  const [letterStatuses, setLetterStatuses] = useLocalStorage(\n    'stateLetterStatuses',\n    initialStates.letterStatuses()\n  )\n  const [submittedInvalidWord, setSubmittedInvalidWord] = useLocalStorage(\n    'stateSubmittedInvalidWord',\n    initialStates.submittedInvalidWord\n  )\n\n  const [currentStreak, setCurrentStreak] = useLocalStorage('current-streak', 0)\n  const [longestStreak, setLongestStreak] = useLocalStorage('longest-streak', 0)\n  const [modalIsOpen, setIsOpen] = useState(false)\n\n  const [firstTime, setFirstTime] = useLocalStorage('first-time', true)\n  const [guessesInStreak, setGuessesInStreak] = useLocalStorage(\n    'guesses-in-streak',\n    firstTime ? 0 : -1\n  )\n  const [infoModalIsOpen, setInfoModalIsOpen] = useState(firstTime)\n  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false)\n  const [difficultyLevel, setDifficultyLevel] = useLocalStorage('difficulty', difficulty.normal)\n  const getDifficultyLevelInstructions = () => {\n    if (difficultyLevel === difficulty.easy) {\n      return 'Guess any 5 letters'\n    } else if (difficultyLevel === difficulty.hard) {\n      return \"Guess any valid word using all the hints you've been given\"\n    } else {\n      return 'Guess any valid word'\n    }\n  }\n  const eg: { [key: number]: string } = {}\n  const [exactGuesses, setExactGuesses] = useLocalStorage('exact-guesses', eg)\n\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  const handleInfoClose = () => {\n    setFirstTime(false)\n    setInfoModalIsOpen(false)\n  }\n\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', initialStates.darkMode)\n  const toggleDarkMode = () => setDarkMode((prev: boolean) => !prev)\n\n  useEffect(\n    () => document.documentElement.classList[darkMode ? 'add' : 'remove']('dark'),\n    [darkMode]\n  )\n\n  useEffect(() => {\n    if (gameState !== state.playing) {\n      setTimeout(() => {\n        openModal()\n      }, 500)\n    }\n  }, [gameState])\n\n  const getCellStyles = (rowNumber: number, colNumber: number, letter: string) => {\n    if (rowNumber === currentRow) {\n      if (letter) {\n        return `nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark ${\n          submittedInvalidWord ? 'border border-red-800' : ''\n        }`\n      }\n      return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n\n    switch (cellStatuses[rowNumber][colNumber]) {\n      case status.green:\n        return 'nm-inset-n-green text-gray-50'\n      case status.yellow:\n        return 'nm-inset-yellow-500 text-gray-50'\n      case status.gray:\n        return 'nm-inset-n-gray text-gray-50'\n      default:\n        return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n  }\n\n  const addLetter = (letter: string) => {\n    setSubmittedInvalidWord(false)\n    setBoard((prev: string[][]) => {\n      if (currentCol > 4) {\n        return prev\n      }\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol] = letter\n      return newBoard\n    })\n    if (currentCol < 5) {\n      setCurrentCol((prev: number) => prev + 1)\n    }\n  }\n\n  // returns an array with a boolean of if the word is valid and an error message if it is not\n  const isValidWord = (word: string): [boolean] | [boolean, string] => {\n    if (word.length < 5) return [false, `please enter a 5 letter word`]\n    if (difficultyLevel === difficulty.easy) return [true]\n    if (!words[word.toLowerCase()]) return [false, `${word} is not a valid word. Please try again.`]\n    if (difficultyLevel === difficulty.normal) return [true]\n    const guessedLetters = Object.entries(letterStatuses).filter(([letter, letterStatus]) =>\n      [status.yellow, status.green].includes(letterStatus)\n    )\n    const yellowsUsed = guessedLetters.every(([letter, _]) => word.includes(letter))\n    const greensUsed = Object.entries(exactGuesses).every(\n      ([position, letter]) => word[parseInt(position)] === letter\n    )\n    if (!yellowsUsed || !greensUsed)\n      return [false, `In hard mode, you must use all the hints you've been given.`]\n    return [true]\n  }\n\n  const onEnterPress = () => {\n    const word = board[currentRow].join('')\n    const [valid, _err] = isValidWord(word)\n    if (!valid) {\n      console.log({ valid, _err })\n      setSubmittedInvalidWord(true)\n      // alert(_err)\n      return\n    }\n\n    if (currentRow === 6) return\n\n    updateCellStatuses(word, currentRow)\n    updateLetterStatuses(word)\n    setCurrentRow((prev: number) => prev + 1)\n    setCurrentCol(0)\n\n    // Only calculate guesses in streak if they've\n    // started a new streak since this feature was added.\n    if (guessesInStreak >= 0) {\n      setGuessesInStreak((prev: number) => prev + 1)\n    }\n  }\n\n  const onDeletePress = () => {\n    setSubmittedInvalidWord(false)\n    if (currentCol === 0) return\n\n    setBoard((prev: any) => {\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol - 1] = ''\n      return newBoard\n    })\n\n    setCurrentCol((prev: number) => prev - 1)\n  }\n\n  const updateCellStatuses = (word: string, rowNumber: number) => {\n    const fixedLetters: { [key: number]: string } = {}\n    setCellStatuses((prev: any) => {\n      const newCellStatuses = [...prev]\n      newCellStatuses[rowNumber] = [...prev[rowNumber]]\n      const wordLength = word.length\n      const answerLetters: string[] = answer.split('')\n\n      // set all to gray\n      for (let i = 0; i < wordLength; i++) {\n        newCellStatuses[rowNumber][i] = status.gray\n      }\n\n      // check greens\n      for (let i = wordLength - 1; i >= 0; i--) {\n        if (word[i] === answer[i]) {\n          newCellStatuses[rowNumber][i] = status.green\n          answerLetters.splice(i, 1)\n          fixedLetters[i] = answer[i]\n        }\n      }\n\n      // check yellows\n      for (let i = 0; i < wordLength; i++) {\n        if (answerLetters.includes(word[i]) && newCellStatuses[rowNumber][i] !== status.green) {\n          newCellStatuses[rowNumber][i] = status.yellow\n          answerLetters.splice(answerLetters.indexOf(word[i]), 1)\n        }\n      }\n\n      return newCellStatuses\n    })\n    setExactGuesses((prev: { [key: number]: string }) => ({ ...prev, ...fixedLetters }))\n  }\n\n  const isRowAllGreen = (row: string[]) => {\n    return row.every((cell: string) => cell === status.green)\n  }\n\n  const avgGuessesPerGame = (): number => {\n    if (currentStreak > 0) {\n      return guessesInStreak / currentStreak\n    } else {\n      return 0\n    }\n  }\n\n  // every time cellStatuses updates, check if the game is won or lost\n  useEffect(() => {\n    const cellStatusesCopy = [...cellStatuses]\n    const reversedStatuses = cellStatusesCopy.reverse()\n    const lastFilledRow = reversedStatuses.find((r) => {\n      return r[0] !== status.unguessed\n    })\n\n    if (gameState === state.playing && lastFilledRow && isRowAllGreen(lastFilledRow)) {\n      setGameState(state.won)\n\n      var streak = currentStreak + 1\n      setCurrentStreak(streak)\n      setLongestStreak((prev: number) => (streak > prev ? streak : prev))\n    } else if (gameState === state.playing && currentRow === 6) {\n      setGameState(state.lost)\n      setCurrentStreak(0)\n    }\n  }, [\n    cellStatuses,\n    currentRow,\n    gameState,\n    setGameState,\n    currentStreak,\n    setCurrentStreak,\n    setLongestStreak,\n  ])\n\n  const updateLetterStatuses = (word: string) => {\n    setLetterStatuses((prev: { [key: string]: string }) => {\n      const newLetterStatuses = { ...prev }\n      const wordLength = word.length\n      for (let i = 0; i < wordLength; i++) {\n        if (newLetterStatuses[word[i]] === status.green) continue\n\n        if (word[i] === answer[i]) {\n          newLetterStatuses[word[i]] = status.green\n        } else if (answer.includes(word[i])) {\n          newLetterStatuses[word[i]] = status.yellow\n        } else {\n          newLetterStatuses[word[i]] = status.gray\n        }\n      }\n      return newLetterStatuses\n    })\n  }\n\n  const playAgain = () => {\n    if (gameState === state.lost) {\n      setGuessesInStreak(0)\n    }\n\n    setAnswer(initialStates.answer())\n    setGameState(initialStates.gameState)\n    setBoard(initialStates.board)\n    setCellStatuses(initialStates.cellStatuses)\n    setCurrentRow(initialStates.currentRow)\n    setCurrentCol(initialStates.currentCol)\n    setLetterStatuses(initialStates.letterStatuses())\n    setSubmittedInvalidWord(initialStates.submittedInvalidWord)\n    setExactGuesses({})\n\n    closeModal()\n  }\n\n  const modalStyles = {\n    overlay: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      zIndex: 99,\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      height: 'calc(100% - 2rem)',\n      width: 'calc(100% - 2rem)',\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      boxShadow: `${\n        darkMode\n          ? '0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C'\n          : '0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'\n      }`,\n      border: 'none',\n      borderRadius: '1rem',\n      maxWidth: '475px',\n      maxHeight: '650px',\n      position: 'relative',\n    },\n  }\n\n  return (\n    <div>\n      <div className={`flex flex-col justify-between h-fill bg-background dark:bg-background-dark`}>\n        <header className=\"flex flex-row justify-between py-2 px-3 text-primary dark:text-primary-dark\">\n          <button\n            type=\"button\"\n            onClick={() => setSettingsModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Settings />\n          </button>\n          <div>\n\n          <h1 className=\" text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\">\n          galileo\n          </h1>\n          <h2 className=\" text-center text-xl tracking-wide font-bold font-righteous mt-3\">\n          { question}\n          </h2>\n            \n          </div>\n \n          <button\n            type=\"button\"\n            onClick={() => setInfoModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Info />\n          </button>\n        </header>\n        <div className=\"flex items-center flex-col py-3 flex-1 justify-center relative\">\n          <div className=\"relative\">\n            <div className=\"grid grid-cols-5 grid-flow-row gap-4\">\n              {board.map((row: string[], rowNumber: number) =>\n                row.map((letter: string, colNumber: number) => (\n                  <span\n                    key={colNumber}\n                    className={`${getCellStyles(\n                      rowNumber,\n                      colNumber,\n                      letter\n                    )} inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full`}\n                  >\n                    {letter}\n                  </span>\n                ))\n              )}\n            </div>\n            <div\n              className={`absolute -bottom-24 left-1/2 transform -translate-x-1/2 ${\n                gameState === state.playing ? 'hidden' : ''\n              }`}\n            >\n              <div className={darkMode ? 'dark' : ''}>\n                <button\n                  autoFocus\n                  type=\"button\"\n                  className=\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\"\n                  onClick={playAgain}\n                >\n                  Play Again\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <InfoModal\n          isOpen={infoModalIsOpen}\n          handleClose={handleInfoClose}\n          darkMode={darkMode}\n          styles={modalStyles}\n        />\n        <EndGameModal\n          isOpen={modalIsOpen}\n          handleClose={closeModal}\n          styles={modalStyles}\n          darkMode={darkMode}\n          gameState={gameState}\n          state={state}\n          currentStreak={currentStreak}\n          longestStreak={longestStreak}\n          answer={answer}\n          playAgain={playAgain}\n          avgGuessesPerGame={avgGuessesPerGame()}\n        />\n        <SettingsModal\n          isOpen={settingsModalIsOpen}\n          handleClose={() => setSettingsModalIsOpen(false)}\n          styles={modalStyles}\n          darkMode={darkMode}\n          toggleDarkMode={toggleDarkMode}\n          difficultyLevel={difficultyLevel}\n          setDifficultyLevel={setDifficultyLevel}\n          levelInstructions={getDifficultyLevelInstructions()}\n        />\n        <div className={`h-auto relative ${gameState === state.playing ? '' : 'invisible'}`}>\n          <Keyboard\n            letterStatuses={letterStatuses}\n            addLetter={addLetter}\n            onEnterPress={onEnterPress}\n            onDeletePress={onDeletePress}\n            gameDisabled={gameState !== state.playing}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}